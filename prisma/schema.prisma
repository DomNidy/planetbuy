// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

model Planet {
    id            String   @id @unique @default(cuid())
    name          String   @unique
    discoveryDate DateTime @default(now())
    surfaceArea   Float

    owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)
    ownerId String?

    listing Listing?

    @@index([ownerId])
}

model Listing {
    id        String   @id @unique @default(cuid())
    listPrice Float
    listDate  DateTime @default(now())

    // A listing must always be connected to a planet
    planet   Planet     @relation(fields: [planetId], references: [id], onDelete: Cascade)
    planetId String     @unique
    CartItem CartItem[]
}

model CartItem {
    id String @id @default(cuid())

    // Reference to the listing 
    listing   Listing @relation(fields: [listingId], references: [planetId], onDelete: Cascade)
    listingId String  @unique

    // Referencing the user (this signifies this CartItem belongs to the user)
    User   User   @relation(fields: [userId], references: [id])
    userId String

    @@index([userId])
}

model User {
    id            String     @id @unique @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    balance       Float      @default(500000)
    accounts      Account[]
    sessions      Session[]
    // The planets the user has
    planets       Planet[]
    cartItems     CartItem[]
}

// Next auth related
model Account {
    id                String  @id @unique @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
