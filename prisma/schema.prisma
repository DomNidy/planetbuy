// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider     = "mysql"
    url          = env("DATABASE_URL")
    relationMode = "prisma"
}

enum PlanetQuality {
    COMMON
    UNIQUE
    RARE
    OUTSTANDING
    PHENOMENAL
}

enum PlanetTemperatureRange {
    EXTREME_COLD
    COLD
    TEMPERATE
    WARM
    HOT
    EXTREME_HOT
}

enum PlanetTerrain {
    MOUNTAINS
    DESERTS
    OCEANS
    FORESTS
    PLAINS
    OTHER
}

model Planet {
    id            String   @id @unique @default(cuid())
    name          String   @unique
    discoveryDate DateTime @default(now())
    surfaceArea   Float

    quality     PlanetQuality          @default(COMMON)
    temperature PlanetTemperatureRange @default(TEMPERATE)
    terrain     PlanetTerrain          @default(DESERTS)

    owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)
    ownerId String?

    listing Listing?

    planetImage              PlanetImage         @relation(fields: [planetImageId], references: [id])
    planetImageId            String
    planetTransactionHistory PlanetTransaction[]

    @@index([ownerId])
    @@index([planetImageId])
}

// A PlanetTransaction represents a user purchasing an individual planet from another user
model PlanetTransaction {
    id Int @id @default(autoincrement())

    // The planet which we are referencing
    planet   Planet? @relation(fields: [planetId], references: [id], onDelete: SetNull)
    planetId String?

    // Reference to the transaction in which this planet was sold/purchased
    transaction   Transaction @relation(fields: [transactionId, buyerId], references: [id, buyerId])
    transactionId String

    // Id of the user who purchased this item 
    buyerId String

    // The user sold this item
    owner   User?   @relation(fields: [ownerId], references: [id], onDelete: SetNull)
    ownerId String?

    // The time frame which this planet belonged to the owner for
    startDate DateTime  @default(now())
    // If end date is null, this can indicate two things:
    // 1: A user currently owns the planet
    // 2: The user who sold the planet deleted their account
    endDate   DateTime?

    // A "snapshot" of the planets' properties at the time of record creation
    // These are not directly relational and should be set manually
    snapshotPlanetName String
    snapshotOwnerName  String
    // Snapshot of this planets listing price (when it was sold)
    snapshotListPrice  Float
    snapshotBuyerName  String @default("unknown")

    @@index([planetId])
    @@index([transactionId, buyerId])
    @@index([ownerId])
}

// A transaction represents a user purchasing items from their cart
// It does not represent a transaction between two individual users
model Transaction {
    id String @id @default(cuid())

    // Reference to the user who "created this transaction" (purchased items)
    buyer   User?   @relation(fields: [buyerId], references: [id], onDelete: SetNull)
    buyerId String?

    // When this transaction was created
    timestamp DateTime @default(now())

    purchasedItems   PlanetTransaction[]
    transactionTotal Float

    @@unique([id, buyerId])
    @@index([buyerId])
}

model PlanetImage {
    id          String                 @id @unique @default(cuid())
    bucketPath  String                 @unique
    eTag        String                 @unique
    temperature PlanetTemperatureRange
    terrain     PlanetTerrain
    quality     PlanetQuality          @default(COMMON)

    // Planets which are using this image as their cover image
    assosciatedPlanets Planet[]

    @@index([temperature, terrain])
}

model Listing {
    id        String   @id @unique @default(cuid())
    listPrice Float
    listDate  DateTime @default(now())

    // A listing must always be connected to a planet
    planet   Planet     @relation(fields: [planetId], references: [id], onDelete: Cascade)
    planetId String     @unique
    CartItem CartItem[]
}

model CartItem {
    id String @id @default(cuid())

    // Reference to the listing 
    listing   Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
    listingId String

    // Referencing the user (this signifies this CartItem belongs to the user)
    User   User   @relation(fields: [userId], references: [id])
    userId String

    // Enforces that a user cannot add the same listing to their cart multiple times
    @@unique([userId, listingId])
    @@index([userId])
    @@index([listingId])
}

model User {
    id            String     @id @unique @default(cuid())
    name          String?
    isGuest       Boolean?   @default(false)
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    balance       Float      @default(500000)
    accounts      Account[]
    sessions      Session[]
    planets       Planet[]
    cartItems     CartItem[]

    transactions      Transaction[]
    planetTransaction PlanetTransaction[]
}

// Next auth related
model Account {
    id                String  @id @unique @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
